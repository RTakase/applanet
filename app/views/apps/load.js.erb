
var data = [];

var myRed = "#922222";
var myGreen = "#2a612a";
var myTransGreen = "rgba(42, 97, 42, 0.8)"

var simapps = <%= @simapps.to_json.html_safe %>;

var link = 
"<%= j render(:partial => 'applink', locals: {app: @app}) %>";

var applist = 
"<%= j render(:partial => 'applist', locals: { simapps: @simapps, dbapps:@dbapps}) %>";



var option = {
  gridPadding: 0,
  seriesDefaults: {
    renderer: $.jqplot.BubbleRenderer,
    shadow: false,
    rendererOptions: {
      bubbleAlpha: 0.8,
      varyBubbleColors: true,
         showlabels: true
    }
  },
  grid: {
    gridLineColor: myGreen,
    background: '#ffffff', 
    borderColor: myGreen,  
    borderWidth: 1.0       
  },
  axesDefaults: {
    //showTicks: false
  },
  axes: {
    xaxis: {
      min:1,
      max:0
    },
    yaxis: {
      min:1,
      max:0
    }
  },
  cursor: {
    show: true,
    zoom: true,
    showTooltip: false
  }
};

var tooSimilar = 0;
//表示するデータから必要な部分を抜き取る
for (i = 0; i < simapps.length; i++) {
  var _data = [];

  var sim = simapps[i].similarity;
  for (j = 0; j < sim.length; j++) {
    _data[j] = 1.0 - sim[j];
  }

  if (option.axes.xaxis.max < _data[0]) option.axes.xaxis.max = _data[0];
  if (option.axes.xaxis.min > _data[0]) option.axes.xaxis.min = _data[0];

  //一次元のときのための補正
  if (_data.length == 1) {
    option.axes.yaxis.max = option.axes.xaxis.max;
    option.axes.yaxis.min = option.axes.xaxis.min;
    _data.push(_data[0]);
  }
  else {
    if (option.axes.yaxis.max < _data[1]) option.axes.yaxis.max = _data[1];
    if (option.axes.yaxis.min > _data[1]) option.axes.yaxis.min = _data[1];
  }

  //円のサイズ
  _data.push(0.4 * simapps[i].distance);

  //ラベル
  switch(i) {
    case 0:
      suffix = "st";
      break;
    case 1:
      suffix = "nd";
      break;
    case 2:
      suffix = "rd";
      break;
    default:
      suffix = "th";
  }       
  var label = (i == 0) ? "谷" : "" + (i+1) + suffix;
  var color = (i == 0) ? myRed : myGreen;

  _data.push({label: label, color: color});

  //タイトルとかと紐付けするためのパッケージID(jqplotの仕様外）
  _data.push(simapps[i].packageid);

  data.push(_data);

  if (i != 0) {
    if (simapps[i-1].distance - simapps[i].distance <= 0.02) tooSimilar++;
  }
}

option.axes.xaxis.max += 0.1;
option.axes.xaxis.min -= 0.1;
option.axes.yaxis.max += 0.1;
option.axes.yaxis.min -= 0.1;

//表示！
$(".status").html("検索できました！");
if (tooSimilar > 5) {
  $(".status").html($(".status").html() + "tips:似ているアプリが固まって現れています。別の基準を追加してはいかかでしょうか")
};
  
$(".graph").show();
$(".graph .msg").html("<%= j render(:partial => 'label', :locals => {:app => @app, :desc => "アプリのグラフ"}) %>"); 

var plot = $.jqplot("chart", [data], option);

$(".applist").show();
$(".applist").html(applist);
$(".applist .msg").html("<%= j render(:partial => 'label', :locals => {:app => @app, :desc => "アプリ一覧"}) %>"); 
//一位の項目だけ赤くする
var headingId = "h-" + simapps[0].packageid.replace(/\./g, "-");
$("#" + headingId).css("background-color", myRed);

$("#appdata").html("<%= j render(:partial => 'data') %>"); 

//拡大した際にはみ出たバブル達を隠す（jqplotに報告してあげようかな）
$(".jqplot-series-canvas").css({overflow: "hidden"});

$(window).resize(function() {
  console.log("hoge");
  plot.replot();
  //plot1.replot( { resetAxes: true } );
});

$(".yaxis").height($("#chart").height());

//バブルがマウスオーバーされた際に対応するapplistを表示する
//data[4]は上のほうで勝手に設定したパッケージID
$('#chart').bind('jqplotDataHighlight', function (ev, seriesIndex, pointIndex, data, radius) {
  var headingId = "h-" + data[4].replace(/\./g, "-");
  $("#" + headingId + " a").click();
});


/*
   //バブルがマウスオーバーされたときにアプリの名前のツールチップを表示する
   $('#chart').bind('jqplotDataHighlight', function (ev, seriesIndex, pointIndex, data, radius) {

   var simapps = <%= @simapps.to_json.html_safe %>;

   //バブルの位置(data[0],data[1])をページ上の座標(x,y)に変換
   var x = plot.axes.xaxis.u2p(data[0]);
   var y = plot.axes.yaxis.u2p(data[1]);
   var color = 'rgb(50%,50%,100%)';

   //ツールチップの位置を指定
   $('.jqplot-cursor-tooltip')
   .css({left:x+radius+5, top:y-radius-5});

   //ツールチップの中身をアプリの名前（バブルチャートのラベル）に指定
   //data[4]は上のほうで勝手に設定したパッケージID
   var title = "";
   for (i = 0; i < simapps.length; i++) {
   if (data[4] == simapps[i].packageid) {
   title = simapps[i].title;
   }
   }

   $('.jqplot-cursor-tooltip')
   .html('<span>'+title+'</span>');

   $('.jqplot-cursor-tooltip').show();
   });

   $('#chart').bind('jqplotDataUnhighlight', function (ev, seriesIndex, pointIndex, data) {
   $('.jqplot-cursor-tooltip').empty();
   $('.jqplot-cursor-tooltip').hide();
   });
 */

//バブルがクリックされたときにそのアプリのウェブページに飛ばす
//
$('#chart').bind('jqplotDataClick',　function (ev, seriesIndex, pointIndex, data) {
  var url = "https://play.google.com/store/apps/details?id="
          + data[4]
          + "&hl=ja";
  //data[4]は上のほうで勝手に設定したパッケージID
  window.open(url);
}); 


