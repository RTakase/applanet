
var data = [];

var simapps = <%= @simapps.to_json.html_safe %>;

var charInfo = <%= Applanet::Application.config.charInfo.to_json.html_safe %>;

var checked = <%= @checked.to_json.html_safe %>

//表示するデータから必要な部分を抜き取る
for (i = 0; i < simapps.length; i++) {
  var _data = [];

  var sim = simapps[i].similarity;
  for (j = 0; j < sim.length; j++) {
    _data[j] = 1.0 - sim[j];
  }

  //一次元のときのための補正
  if (_data.length == 1) _data.push(_data[0]);

  //円のサイズ
  _data.push(0.4 * simapps[i].distance);

  //ラベル
  _data.push(""+i);

  //タイトルとかと紐付けするためのパッケージID(jqplotの仕様外）
  _data.push(simapps[i].packageid);

  data.push(_data);
}

var option = {
  gridPadding: 0,
  seriesDefaults: {
    renderer: $.jqplot.BubbleRenderer,
    shadow: false,
    rendererOptions: {
      bubbleAlpha: 0.7,
      varyBubbleColors: true,
         showlabels: true
    }
  },
  axesDefaults: {
    showTicks: false,
    //tickRenderer: $.jqplot.CanvasAxisTickRenderer,
    //showTickMarks: false,
    /* tickOptions: {
       formatter: function(format, value) {
       var cls = "";
       var id = "";
       switch(value*10) {
       case -1:
       cls = "smile-o"
       id = "graph-good"
       break;
       case 5:
       cls = "meh-o"
       id = "graph-normal"
       break;
       case 11:
       cls = "frown-o"
       id = "graph-bad"
       break;
       }
       return $.jqplot.sprintf(format, cls, id);
       }, */
      //formatString: "<i class='fa fa-%s' id='%s'></i>"
  //  }
    //ticks: [-0.1, 0.5, 1.1]
  },
    /* axes: {
       xaxis: {
       //      label: ""
       },
       yaxis: {
       //label: "",
       //labelRenderer: $.jqplot.CanvasAxisLabelRenderer
       }
       }, */
  cursor: {
    show: true,
    zoom: true,
    showTooltip: false
  }
};
          /* var label = [
             option.axes.xaxis.label,
             option.axes.yaxis.label
             ];

             if (checked.length <= 2) {
             for (i = 0; i < checked.length; i++) {
             label[i] = charInfo[checked[i]];
             }
             }

             option.axes.xaxis.label = label[0];
             option.axes.yaxis.label = label[1]; */


$("#chart").show();
$("#chart").empty();
$("#chart").off(); //紐付けられた全イベントを解除
var plot = $.jqplot("chart", [data], option);

//拡大した際にはみ出たバブル達を隠す（jqplotに報告してあげようかな）
$(".jqplot-series-canvas").css({overflow: "hidden"});

//バブルがマウスオーバーされたときにアプリの名前のツールチップを表示する
$('#chart').bind('jqplotDataHighlight', function (ev, seriesIndex, pointIndex, data, radius) {

  var simapps = <%= @simapps.to_json.html_safe %>;

  //バブルの位置(data[0],data[1])をページ上の座標(x,y)に変換
  var x = plot.axes.xaxis.u2p(data[0]);
  var y = plot.axes.yaxis.u2p(data[1]);
  var color = 'rgb(50%,50%,100%)';

  //ツールチップの位置を指定
  $('.jqplot-cursor-tooltip')
     .css({left:x+radius+5, top:y-radius-5});

  //ツールチップの中身をアプリの名前（バブルチャートのラベル）に指定
  //data[4]は上のほうで勝手に設定したパッケージID
  var title = "";
  for (i = 0; i < simapps.length; i++) {
    if (data[4] == simapps[i].packageid) {
      title = simapps[i].title;
    }
  }

  $('.jqplot-cursor-tooltip')
                         .html('<span>'+title+'</span>');

  $('.jqplot-cursor-tooltip').show();
});

$('#chart').bind('jqplotDataUnhighlight', function (ev, seriesIndex, pointIndex, data) {
  $('.jqplot-cursor-tooltip').empty();
  $('.jqplot-cursor-tooltip').hide();
});

//バブルがクリックされたときにそのアプリのウェブページに飛ばす
//
$('#chart').bind('jqplotDataClick',　function (ev, seriesIndex, pointIndex, data) {
  var url = "https://play.google.com/store/apps/details?id="
          + data[4]
          + "&hl=ja";
  //data[4]は上のほうで勝手に設定したパッケージID
  window.open(url);
});

//部分テンプレートを呼び出す
$("#msg").html("<%= j render(:partial => 'applink') %>");
$("#appdata").html("<%= j render(:partial => 'data') %>");
